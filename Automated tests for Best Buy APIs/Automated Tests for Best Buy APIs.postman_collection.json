{
	"info": {
		"_postman_id": "d1c8b4fb-eed8-4619-8578-50c908306cd9",
		"name": "Automated Tests for Best Buy APIs",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "16606744"
	},
	"item": [
		{
			"name": "Products",
			"item": [
				{
					"name": "Get All Products",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"All Products is more than 50000\", function () {\r",
									"    pm.expect(jsonData.total).to.greaterThan(50000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3030/products",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3030",
							"path": [
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Creates a new product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let ProductId = pm.response.json();\r",
									"pm.globals.set(\"MyProductId\", ProductId.id);\r",
									"pm.test(\"Successful POST request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
									"});\r",
									"pm.test(\"New Product is created\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.name).to.eql(\"MoProduct\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"MoProduct\",\r\n  \"type\": \"Hgood\",\r\n  \"price\": 2300,\r\n  \"shipping\": 123,\r\n  \"upc\": \"NC123\",\r\n  \"description\": \"Create New Product\",\r\n  \"manufacturer\": \"NLM\",\r\n  \"model\": \"UCE\",\r\n  \"url\": \"GG.COM\",\r\n  \"image\": \"IMAGE\"\r\n}"
						},
						"url": {
							"raw": "http://localhost:3030/products",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3030",
							"path": [
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get a specific product based on an ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Product Retrieved Based On Id \", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data[0].id).to.eql(pm.variables.get(\"MyProductId\"));\r",
									"\r",
									"    \r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3030/products?id={{MyProductId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3030",
							"path": [
								"products"
							],
							"query": [
								{
									"key": "id",
									"value": "{{MyProductId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Updates a product based on an ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Producted is updated successfully\", function () {\r",
									"    \r",
									"    pm.expect(jsonData[0].name).to.eql(\"NewMoProduct\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "content-type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"NewMoProduct\",\r\n  \"type\": \"Hgood\",\r\n  \"price\": 2500,\r\n  \"shipping\": 123,\r\n  \"upc\": \"NC123\",\r\n  \"description\": \"Update Product\",\r\n  \"manufacturer\": \"NLM\",\r\n  \"model\": \"UCE\",\r\n  \"url\": \"GG.COM\",\r\n  \"image\": \"IMAGE\"\r\n}"
						},
						"url": {
							"raw": "http://localhost:3030/products?id={{MyProductId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3030",
							"path": [
								"products"
							],
							"query": [
								{
									"key": "id",
									"value": "{{MyProductId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a single Product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Product Deleted Based On Id \", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0].id).to.eql(pm.variables.get(\"MyProductId\"));\r",
									"});\r",
									"\r",
									"    \r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:3030/products?id={{MyProductId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3030",
							"path": [
								"products"
							],
							"query": [
								{
									"key": "id",
									"value": "{{MyProductId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Limited the number of products returned.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Limited the number of products returned\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.limit).to.eql(20);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3030/products?$limit=20",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3030",
							"path": [
								"products"
							],
							"query": [
								{
									"key": "$limit",
									"value": "20"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Skip the specified number of products",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Skip the specified number of products\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.skip).to.eql(40000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3030/products?$skip=40000",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3030",
							"path": [
								"products"
							],
							"query": [
								{
									"key": "$skip",
									"value": "40000"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Highest Priced Products",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3030/products?$sort[price]=-1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3030",
							"path": [
								"products"
							],
							"query": [
								{
									"key": "$sort[price]",
									"value": "-1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Product Name and Description Only",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3030/products?$select[]=name&$select[]=description",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3030",
							"path": [
								"products"
							],
							"query": [
								{
									"key": "$select[]",
									"value": "name"
								},
								{
									"key": "$select[]",
									"value": "description"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Stores",
			"item": [
				{
					"name": "Get All Stores",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3030/stores",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3030",
							"path": [
								"stores"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create New Store",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let StoreID = pm.response.json();\r",
									"pm.globals.set(\"MyStoreID\", StoreID.id);\r",
									"pm.test(\"Successful POST request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
									"});\r",
									"pm.test(\"New Store is Created\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.name).to.eql(\"MoStore\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"MoStore\",\r\n  \"type\": \"BigMo\",\r\n  \"address\": \"Cairo\",\r\n  \"address2\": \"New Cairo\",\r\n  \"city\": \"5th \",\r\n  \"state\": \"4th satae\",\r\n  \"zip\": \"7111\",\r\n  \"lat\": 14.1,\r\n  \"lng\": 12.2,\r\n  \"hours\": \"4\",\r\n  \"services\": {}\r\n}"
						},
						"url": {
							"raw": "http://localhost:3030/stores",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3030",
							"path": [
								"stores"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get a specific Store based on an ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Store Retrieved Based On Id \", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data[0].id).to.eql(pm.variables.get(\"MyStoreID\"));    \r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3030/stores?id={{MyStoreID}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3030",
							"path": [
								"stores"
							],
							"query": [
								{
									"key": "id",
									"value": "{{MyStoreID}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Updates a Store based on an ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Store is updated successfully\", function () {\r",
									"     var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0].name).to.eql(\"NewMoStore\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"NewMoStore\",\r\n  \"type\": \"NewBigMo\",\r\n  \"address\": \"Cairo\",\r\n  \"address2\": \"New Cairo\",\r\n  \"city\": \"5th \",\r\n  \"state\": \"4th satae\",\r\n  \"zip\": \"7111\",\r\n  \"lat\": 14.1,\r\n  \"lng\": 12.2,\r\n  \"hours\": \"4\",\r\n  \"services\": {}\r\n}"
						},
						"url": {
							"raw": "http://localhost:3030/stores?id={{MyStoreID}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3030",
							"path": [
								"stores"
							],
							"query": [
								{
									"key": "id",
									"value": "{{MyStoreID}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a single Store",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Store Deleted Based On Id \", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0].id).to.eql(pm.variables.get(\"MyStoreID\"));\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:3030/stores?id={{MyStoreID}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3030",
							"path": [
								"stores"
							],
							"query": [
								{
									"key": "id",
									"value": "{{MyStoreID}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Services",
			"item": [
				{
					"name": "Get All Services",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3030/services",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3030",
							"path": [
								"services"
							]
						}
					},
					"response": []
				},
				{
					"name": "Creates a new Service",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let ServiceID = pm.response.json();\r",
									"pm.globals.set(\"MyServiceID\", ServiceID.id);\r",
									"pm.test(\"Successful POST request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
									"});\r",
									"pm.test(\"New Service is Created\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.name).to.eql(\"MoService\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "content-type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"MoService\"\r\n}"
						},
						"url": {
							"raw": "http://localhost:3030/services",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3030",
							"path": [
								"services"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get a specific Service based on an ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Service Retrieved Based On Id \", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data[0].id).to.eql(pm.variables.get(\"MyServiceID\"));    \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3030/services?id={{MyServiceID}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3030",
							"path": [
								"services"
							],
							"query": [
								{
									"key": "id",
									"value": "{{MyServiceID}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Updates a Service based on an ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Service is updated successfully\", function () {\r",
									"     var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0].name).to.eql(\"NewMoService\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "content-type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"NewMoService\"\r\n}"
						},
						"url": {
							"raw": "http://localhost:3030/services?id={{MyServiceID}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3030",
							"path": [
								"services"
							],
							"query": [
								{
									"key": "id",
									"value": "{{MyServiceID}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a single Service",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Service Deleted Based On Id \", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0].id).to.eql(pm.variables.get(\"MyServiceID\"));\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:3030/services?id={{MyServiceID}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3030",
							"path": [
								"services"
							],
							"query": [
								{
									"key": "id",
									"value": "{{MyServiceID}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Categories",
			"item": [
				{
					"name": "Get All Categories",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3030/categories",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3030",
							"path": [
								"categories"
							]
						}
					},
					"response": []
				},
				{
					"name": "Creates a new Categorie",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let CategoriesID = pm.response.json();\r",
									"pm.globals.set(\"MyCategorieID\", CategoriesID.id);\r",
									"pm.test(\"Successful POST request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
									"});\r",
									"pm.test(\"New Categorie is Created\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.name).to.eql(\"MoCategorie\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "content-type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"MoCategorie\",\r\n  \"id\": \"5005\"\r\n}"
						},
						"url": {
							"raw": "http://localhost:3030/categories?=",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3030",
							"path": [
								"categories"
							],
							"query": [
								{
									"key": "",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get a specific Categorie based on an ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Categories Retrieved Based On Id \", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data[0].id).to.eql(pm.variables.get(\"MyCategorieID\"));    \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3030/categories?id={{MyCategorieID}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3030",
							"path": [
								"categories"
							],
							"query": [
								{
									"key": "id",
									"value": "{{MyCategorieID}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Updates a Categories based on an ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Service is updated successfully\", function () {\r",
									"     var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0].name).to.eql(\"NewMoCategorie\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "content-type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"NewMoCategorie\",\r\n  \"id\": \"5005\"\r\n}"
						},
						"url": {
							"raw": "http://localhost:3030/categories?id={{MyCategorieID}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3030",
							"path": [
								"categories"
							],
							"query": [
								{
									"key": "id",
									"value": "{{MyCategorieID}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a single Categorie",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Service Deleted Based On Id \", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0].id).to.eql(pm.variables.get(\"MyCategorieID\"));\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:3030/categories?id={{MyCategorieID}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3030",
							"path": [
								"categories"
							],
							"query": [
								{
									"key": "id",
									"value": "{{MyCategorieID}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Utilities",
			"item": [
				{
					"name": "The current version of the API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3030/version",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3030",
							"path": [
								"version"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Healthcheck",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3030/healthcheck",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3030",
							"path": [
								"healthcheck"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}